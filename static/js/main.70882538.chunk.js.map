{"version":3,"sources":["Components/love/index.js","App.js","serviceWorker.js","index.js"],"names":["Love","props","background_handler","e","value","target","regex","RegExp","state","back","console","log","new_text","text","replace","setState","back_empty","main_handler","main","main_empty","id","type","this","onChange","style","width","height","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNA2EeA,G,wDAxEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAkBRC,mBAAqB,SAAAC,GACnB,IAAMC,EAAQD,EAAEE,OAAOD,MACvB,GAAc,KAAVA,EAAa,CACf,IAAME,EAAQ,IAAIC,OAAO,EAAKC,MAAMC,KAAM,KAC1CC,QAAQC,IAAIL,EAAOF,GACnB,IAAMQ,EAAW,EAAKJ,MAAMK,KAAKC,QAAQR,EAAOF,GAChD,EAAKW,SAAS,CACZF,KAAMD,EACNH,KAAML,EACNY,YAAY,SAId,EAAKD,SAAS,CACZC,YAAY,KAjCA,EAqClBC,aAAe,SAAAd,GACb,IAAMC,EAAQD,EAAEE,OAAOD,MACvB,GAAc,KAAVA,EAAa,CACf,IAAME,EAAQ,IAAIC,OAAO,EAAKC,MAAMU,KAAM,KAC1CR,QAAQC,IAAIL,EAAOF,GACnB,IAAMQ,EAAW,EAAKJ,MAAMK,KAAKC,QAAQR,EAAOF,GAChD,EAAKW,SAAS,CACZF,KAAMD,EACNM,KAAMd,EACNe,YAAY,SAId,EAAKJ,SAAS,CACZI,YAAY,KAjDhB,EAAKX,MAAQ,CACXK,KAAK,mnCASLJ,KAAM,eACNS,KAAM,eACNF,YAAY,EACZG,YAAY,GAfE,E,qDAwDhB,OACE,6BACE,+CACA,2BAAOC,GAAG,aAAaC,KAAK,OAAOjB,MAAOkB,KAAKd,MAAMQ,WAAa,GAAKM,KAAKd,MAAMC,KAAMc,SAAUD,KAAKpB,qBACvG,6BACA,yCACA,2BAAOkB,GAAG,OAAOC,KAAK,OAAOjB,MAAOkB,KAAKd,MAAMW,WAAa,GAAKG,KAAKd,MAAMU,KAAMK,SAAUD,KAAKL,eACjG,6BACA,2CACA,8BAAUG,GAAG,SAASI,MAAO,CAACC,MAAO,QAASC,OAAQ,SAAUtB,MAAOkB,KAAKd,MAAMK,KAAMc,UAAQ,IAChG,kC,GAnEWC,IAAMC,YCgBVC,E,kDAbb,WAAY7B,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,GAFG,E,qDAKhB,OACE,6BACE,kBAAC,EAAD,W,GARUoB,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.70882538.chunk.js","sourcesContent":["import React from 'react';\n\nclass Love extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      text: `🌙🌙🌙🌙🌙🌙🌙🌙🌙🌙\n🌙🌙🌙❤️🌙🌙🌙❤️🌙🌙🌙\n🌙 🌙❤️❤️❤️ 🌙❤️❤️❤️🌙\n🌙❤️❤️❤️❤️❤️❤️❤️❤️❤️🌙\n🌙 🌙❤️❤️❤️❤️❤️❤️❤️🌙\n🌙🌙🌙❤️❤️❤️❤️❤️🌙🌙\n🌙🌙🌙🌙❤️❤️❤️🌙🌙🌙🌙\n🌙 🌙🌙🌙🌙❤️🌙🌙🌙🌙\n🌙🌙🌙🌙🌙🌙🌙🌙🌙🌙`,\n      back: '🌙',\n      main: '❤️',\n      back_empty: false,\n      main_empty: false\n\n    };\n  };\n  background_handler = e => {\n    const value = e.target.value;\n    if (value !== ''){\n      const regex = new RegExp(this.state.back, 'g');\n      console.log(regex, value);\n      const new_text = this.state.text.replace(regex, value);\n      this.setState({\n        text: new_text,\n        back: value,\n        back_empty: false,\n      })\n    }\n    else {\n      this.setState({\n        back_empty: true\n      })\n    }\n  };\n  main_handler = e => {\n    const value = e.target.value;\n    if (value !== ''){\n      const regex = new RegExp(this.state.main, 'g');\n      console.log(regex, value);\n      const new_text = this.state.text.replace(regex, value);\n      this.setState({\n        text: new_text,\n        main: value,\n        main_empty: false,\n      })\n    }\n    else {\n      this.setState({\n        main_empty: true\n      })      \n    }\n  };\n  render(){\n    return(\n      <div>\n        <label>Background: </label>\n        <input id=\"background\" type=\"text\" value={this.state.back_empty ? '' : this.state.back} onChange={this.background_handler} />\n        <br />\n        <label>Main: </label>\n        <input id=\"main\" type=\"text\" value={this.state.main_empty ? '' : this.state.main} onChange={this.main_handler} />\n        <br />\n        <label>result: </label>\n        <textarea id=\"result\" style={{width: '141px', height: '149px'}} value={this.state.text} disabled />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default Love;","import React from 'react';\nimport './App.css';\nimport Love from './Components/love'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {}\n  }\n  render(){\n    return(\n      <div>\n        <Love />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}